// Generated by CoffeeScript 1.3.1
var addEvents, color, draw, drawPointsString, drawRectangle, fillFromCookies, keys, saveToCookies;

draw = function(state) {
  var canvas, coords, ctx, index, rectangle, rectangles, _i, _len, _results;
  canvas = $('#board')[0];
  if (canvas.getContext) {
    ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, 2000, 2000);
    rectangles = $('#' + state + '-values').val().replace(/\(/g, '').replace(/\)/g, '').replace(/INFO logger:/g, '').split('\n');
    _results = [];
    for (index = _i = 0, _len = rectangles.length; _i < _len; index = ++_i) {
      rectangle = rectangles[index];
      coords = rectangle.split(',');
      _results.push(drawRectangle(Number(coords[0]), Number(coords[1]), Number(coords[2]), Number(coords[3]), ctx, color(index)));
    }
    return _results;
  }
};

drawPointsString = function(points_string) {
  var canvas, coords, ctx, index, rectangle, rectangles, _i, _len, _results;
  canvas = $('#board')[0];
  if (canvas.getContext) {
    ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, 2000, 2000);
    rectangles = points_string.replace(/\(/g, '').replace(/\)/g, '').split('-');
    _results = [];
    for (index = _i = 0, _len = rectangles.length; _i < _len; index = ++_i) {
      rectangle = rectangles[index];
      coords = rectangle.split(',');
      _results.push(drawRectangle(Number(coords[0]), Number(coords[1]), Number(coords[2]), Number(coords[3]), ctx, color(index)));
    }
    return _results;
  }
};

color = function(index) {
  var color_list;
  color_list = ['red', 'green', 'blue', 'orange', 'black', 'purple', 'pink', 'yellow'];
  return color_list[index % color_list.length];
};

drawRectangle = function(top, left, bottom, right, ctx, color) {
  ctx.strokeStyle = color;
  return ctx.strokeRect(left, top, right - left, bottom - top);
};

keys = ['before-values', 'after-values'];

saveToCookies = function() {
  var key, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = keys.length; _i < _len; _i++) {
    key = keys[_i];
    _results.push($.cookie(key, $('#' + key).val()));
  }
  return _results;
};

fillFromCookies = function() {
  var key, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = keys.length; _i < _len; _i++) {
    key = keys[_i];
    if ($.cookie(key)) {
      _results.push($('#' + key).val($.cookie(key)));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

addEvents = function() {
  return $('#swap').click(function() {
    if ($('#current-state').data('active') === 'before') {
      $('#current-state').data('active', 'after');
      $('#current-state').html('After');
      draw('after');
    } else {
      $('#current-state').data('active', 'before');
      $('#current-state').html('Before');
      draw('before');
    }
    saveToCookies();
    return false;
  });
};

$(document).ready(function() {
  var points, url_values;
  fillFromCookies();
  url_values = $.url();
  points = url_values.param('points');
  drawPointsString(points);
});
